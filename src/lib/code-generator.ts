import fs = require('fs');
import path from 'path';

import { IRecipe } from './interfaces';

export class CodeGenerator {
  run(baseOutputPath: string, envName: string, recipes: IRecipe[]) {
    if (!envName) {
      throw new Error('envName is not provided');
    }
    //exit(0);
    let overall_buffer = '';
    recipes.forEach((recipe) => {
      let recipe_buffer = '';
      const results = recipe.generate(envName);
      const recipeOutputSubfolder = recipes.length > 1 ? recipe.constructor.name : '';
      results.forEach((result) => {
        const generatorOutput = result.content;
        const targetFilePath = path.join(baseOutputPath, envName, recipeOutputSubfolder, result.location);

        if (!fs.existsSync(path.dirname(targetFilePath))) {
          fs.mkdirSync(path.dirname(targetFilePath), {
            recursive: true,
          });
        }

        console.log(`writing to ${targetFilePath}`);
        fs.writeFileSync(targetFilePath, generatorOutput);
        recipe_buffer += `\n\n --BEGIN generated by ${result.generatorName}  ${result.location} \n`;
        recipe_buffer += generatorOutput;
        recipe_buffer += `\n --END ${result.generatorName}  ${result.location} \n`;
      });

      const recipe_script = path.join(
        baseOutputPath,
        envName,
        recipeOutputSubfolder,
        `${recipe.constructor.name}_all.sql`,
      );
      fs.writeFileSync(recipe_script, recipe_buffer);

      overall_buffer += recipe_buffer;
    });
    fs.writeFileSync(path.join(baseOutputPath, envName, `${envName}_ddl.sql`), overall_buffer);
  }
}
